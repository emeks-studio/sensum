// Main reference: https://docs.midnight.network/develop/how-midnight-works/keeping-data-private
// Here for available functions: https://docs.midnight.network/develop/reference/compact/ledger-adt
// Here about types: https://docs.midnight.network/develop/reference/compact/lang-ref#types

include "std";

witness find_auth_path(pk: Bytes[32]): MerkleTreePath[10, Bytes[32]];
witness secret_key(): Bytes[32];

ledger {
  // TODO: We could have a set of "The Oracles" (in the context of sensum).
  // a.k.a The Oracle
  organizer: Cell[Bytes[32]];
  
  // HistoricMerkleTree[n,a]: A path in a depth `n` Merkle tree, leading to a leaf of type `a`
  // Ref. https://docs.midnight.network/develop/reference/compact/compact-std-library/exports#merkletreepath
  // TODO: review n meaning!
  authorizedCommitments: HistoricMerkleTree[10, Bytes[32]];
  authorizedNullifiers: Set[Bytes[32]];
  sensations: List[Opaque["string"]];

  constructor() {
    // ledger.organizer.write(organizer_public_key(secret_key()));
    ledger.organizer = organizer_public_key(secret_key());
  }
}

// In this model, each user register it self.
// And automatically becomes a chosen one (if there is space in the merkle tree).
// Attack: From the outside a person could generate multiple secret keys 
//         and register multiple times in order to fullfill the merkle tree,
//         making the proccess unpleasant.
// Defense: You need to pay for pray (pay for write)
export circuit praise_the_sun(): Void {
  assert !ledger.authorizedCommitments.is_full() "Sorry, you have a cursed destiny!";
  const chosen_one = chosen_one_public_key(secret_key());
  ledger.authorizedCommitments.insert(chosen_one);
}

// This is the opposite model, here The Oracle instead of choosing, it removes the chosen ones.
// Note: In case of reaching full tree for authorizedCommitments, users should pray again. 
// Note: Organizer decision should be fair.
export circuit cosmic_ballet(token: Bytes[32]): Void {
  // Note: Seems like both sytaxes are valid
  // assert ledger.organizer.read() == organizer_public_key(secret_key()) "You have no power here!";
  assert ledger.organizer == organizer_public_key(secret_key()) "You have no power here!";
  assert ledger.authorizedNullifiers.member(token) "Unable to refresh: Unused or invalid token!";
  // In case merkle tree is full, we reset it to default (users need to register again). Old tokens expired!
  if (ledger.authorizedCommitments.is_full()) {
    ledger.authorizedCommitments.reset_to_default();
    ledger.authorizedNullifiers.reset_to_default();
  } else
    ledger.authorizedNullifiers.remove(token);
}

// Attack: I think we should have more than one chosen one per time, if not,
//         After a new sensation you could link the chosen one public with the new nullifier
export circuit transmit(sensation: Opaque["string"]): Void {
  const sk = secret_key();
  // FIXME: According to our current witness implementation, if the user is not already there,
  // it will return undefined, making the tx fail before reach the contract assertion.
  // ^ This also affects the im_blessed function.


  // At https://docs.midnight.network/develop/how-midnight-works/keeping-data-private#the-commitmentnullifier-pattern
  // ```
  // const auth_path = find_auth_path(public_key(sk));
  // assert ledger.authorizedCommitments.check_root(merkle_tree_path_root[10, Bytes[32]](auth_path))
  //   "not authorized";
  // ```

  // findPathForLeaf(leaf: value_type): MerkleTreePath<value_type> | undefined
  // > Finds the path for a given leaf in a Merkle tree. Be warned that this is O(n) and should be avoided for large trees. Returns undefined if no such leaf exists. MerkleTreePath is defined in compact-runtime runtime.ts.
  // > callable only from Typescript

  // [22:41:56.457] ERROR (728349): Found error 'type error: find_auth_path return value at src/sensum.compact line 7, char 1; expected value of type struct MerkleTreePath[leaf: Bytes[32], path: Vector[10, struct MerkleTreePathEntry[sibling: struct MerkleTreeDigest[field: Field], goes_left: Boolean]]] but received undefined'


  const auth_path = find_auth_path(chosen_one_public_key(sk));
  assert ledger.authorizedCommitments.check_root(merkle_tree_path_root[10, Bytes[32]](auth_path))
    "You are not a chosen one!";
  const nul = nullifier(sk);
  assert !ledger.authorizedNullifiers.member(nul) "token already used!";
  ledger.authorizedNullifiers.insert(nul);
  ledger.sensations.push_front(sensation);
}

// Question: Read only functions are free?
// The purpose of this function, is to not make the user pay for a invalid transmit.
// FIXME: For some reason, this is not considered pure.
// export pure circuit im_blessed(): Boolean {
export circuit im_blessed(): Boolean {
  const sk = secret_key();
  const auth_path = find_auth_path(chosen_one_public_key(sk));
  const registered = ledger.authorizedCommitments.check_root(merkle_tree_path_root[10, Bytes[32]](auth_path));
  const nul = nullifier(sk);
  const token_used = ledger.authorizedNullifiers.member(nul);
  return registered && !token_used; 
}

export circuit organizer_public_key(sk: Bytes[32]): Bytes[32] {
  return persistent_hash(pad(32, "organaizer-domain"), sk);
}

circuit chosen_one_public_key(sk: Bytes[32]): Bytes[32] {
  return persistent_hash(pad(32, "commitment-domain"), sk);
}

circuit nullifier(sk: Bytes[32]): Bytes[32] {
  return persistent_hash(pad(32, "nullifier-domain"), sk);
}
